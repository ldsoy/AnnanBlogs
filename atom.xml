<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ldsoy.github.io/AnnanBlogs/</id>
    <title>Annan&apos;s Blogs</title>
    <updated>2022-01-02T08:35:45.096Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ldsoy.github.io/AnnanBlogs/"/>
    <link rel="self" href="https://ldsoy.github.io/AnnanBlogs/atom.xml"/>
    <subtitle>每天都要开心哦！</subtitle>
    <logo>https://ldsoy.github.io/AnnanBlogs/images/avatar.png</logo>
    <icon>https://ldsoy.github.io/AnnanBlogs/favicon.ico</icon>
    <rights>All rights reserved 2022, Annan&apos;s Blogs</rights>
    <entry>
        <title type="html"><![CDATA[N1单臂路由设置]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/n1-danbi/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/n1-danbi/">
        </link>
        <updated>2021-12-12T03:01:15.000Z</updated>
        <summary type="html"><![CDATA[<p>Openwrt如何设置单臂路由</p>
]]></summary>
        <content type="html"><![CDATA[<p>Openwrt如何设置单臂路由</p>
<!-- more -->
<p>1.LAN口物理设置关闭桥接</p>
<p>2.添加一个WAN口和LAN口同一块物理网卡</p>
<figure data-type="image" tabindex="1"><img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/image-20211212110018126.png" alt="image-20211212110018126" loading="lazy"></figure>
<p>WAN的上网协议就看着你自己了，DHCP和PPOE都行</p>
<p>3.在LAN口设置IP段，别和其他路由冲突</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[centos安装的先前工作]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/use-centos-before/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/use-centos-before/">
        </link>
        <updated>2021-11-30T16:52:34.000Z</updated>
        <summary type="html"><![CDATA[<p>一个空白的Centos7.6版本的系统，使用前需要弄得工作</p>
]]></summary>
        <content type="html"><![CDATA[<p>一个空白的Centos7.6版本的系统，使用前需要弄得工作</p>
<!-- more -->
<h2 id="设置系统时间为北京时间可选">设置系统时间为北京时间（可选）</h2>
<p>1.删除自带的localtime</p>
<pre><code class="language-sh">rm -rf /etc/localtime
</code></pre>
<p>2.创建软链接到localtime</p>
<pre><code class="language-sh">ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
</code></pre>
<h2 id="宝塔面板安装">宝塔面板安装</h2>
<pre><code class="language-sh">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh
</code></pre>
<h2 id="docker安装">Docker安装</h2>
<p>安装前用sudo更新下软件包</p>
<pre><code class="language-sh">sudo yum update
</code></pre>
<p>卸载旧版本(如果安装过旧版本的话)</p>
<pre><code class="language-sh">sudo yum remove docker  docker-common docker-selinux docker-engine
</code></pre>
<p>安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
<pre><code class="language-sh">sudo yum install -y yum-utils device-mapper-persistent-data lvm2
</code></pre>
<p>设置yum源</p>
<pre><code class="language-sh">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</code></pre>
<p>可以查看所有仓库中所有docker版本，并选择特定版本安装</p>
<pre><code class="language-sh">yum list docker-ce --showduplicates | sort -r
</code></pre>
<p>安装docker</p>
<pre><code class="language-sh">sudo yum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0
#sudo yum install &lt;FQPN&gt;  # 例如：sudo yum install docker-ce-17.12.0.ce
</code></pre>
<p>启动并加入开机启动</p>
<pre><code class="language-sh">sudo systemctl start docker
sudo systemctl enable docker
</code></pre>
<p>验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p>
<pre><code class="language-sh">docker version
</code></pre>
<h3 id="docker可视化面板portainer安装">docker可视化面板Portainer安装</h3>
<pre><code class="language-sh"># 搜索镜像
docker search portainer/portainer
# 拉取镜像
docker pull portainer/portainer
# 运行镜像
docker run -d -p 9000:9000 -v /root/portainer:/data -v /var/run/docker.sock:/var/run/docker.sock --name dev-portainer portainer/portainer
</code></pre>
<p>参数说明：</p>
<blockquote>
<p>-d #容器在后台运行</p>
<p>-p 9000:9000 # 宿主机9000端口映射容器中的9000端口</p>
<p>-v /var/run/docker.sock:/var/run/docker.sock # 把宿主机的Docker守护进程(docker daemon)默认监听的Unix域套接字挂载到容器中</p>
<p>-v /root/portainer:/data # 把宿主机目录 /root/portainer 挂载到容器 /data 目录；</p>
<p>–name dev-portainer # 指定运行容器的名称</p>
</blockquote>
<h3 id="docker拉取镜像速度慢解决">docker拉取镜像速度慢解决</h3>
<p>在/etc/docker/daemon.json文件中添加下面参数</p>
<p>此处使用的是中国科技大学的docker镜像源</p>
<pre><code class="language-shell">{

 &quot;registry-mirrors&quot; : [&quot;https://docker.mirrors.ustc.edu.cn&quot;]

}
</code></pre>
<p>弄完重启容器服务<code>service docker restart</code></p>
<h2 id="关于端口命令">关于端口命令</h2>
<h3 id="查看所有开放端口">查看所有开放端口</h3>
<pre><code class="language-sh">firewall-cmd --zone=public --list-ports
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/image-20211130220256939.png" alt="image-20211130220256939" loading="lazy"></figure>
<h3 id="查看监听的端口">查看监听的端口</h3>
<pre><code class="language-sh">netstat -lnpt
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/image-20211130220333208.png" alt="image-20211130220333208" loading="lazy"></figure>
<p><em><strong>PS:centos7默认没有 netstat 命令，需要安装 net-tools 工具，yum install -y net-tools</strong></em></p>
<h3 id="检查端口号被哪个进程占用或者可以检索进程号占用的哪个端口">检查端口号被哪个进程占用，或者可以检索进程号占用的哪个端口</h3>
<figure data-type="image" tabindex="3"><img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/image-20211130220659404.png" alt="image-20211130220659404" loading="lazy"></figure>
<h2 id="关于进程的命令">关于进程的命令</h2>
<h3 id="查看所有命令">查看所有命令</h3>
<pre><code class="language-sh">ps -a
</code></pre>
<h3 id="查看某个进程的详细信息">查看某个进程的详细信息</h3>
<pre><code class="language-sh">ps 2809
</code></pre>
<h3 id="终止进程">终止进程</h3>
<pre><code class="language-sh">kill -9 2809
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我的第一个vps总结]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/myfirstvps-conclusion/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/myfirstvps-conclusion/">
        </link>
        <updated>2021-11-23T08:20:32.000Z</updated>
        <summary type="html"><![CDATA[<p>人生第一个vps总结，感觉很新奇，原来节点是这么搭建出来的,想买vps的小伙伴，可以先大概看看我整个的购买和搭建的流程，哪里容易出问题什么的，再做决定<br>
我的这个vps是Racknerd的</p>
<p>年付10.88刀，折合支付宝69rmb，性价比极高，反代优选能上 70mb/s</p>
<blockquote>
<p>1T/月<br>
1Gbps宽带<br>
内存786m<br>
单核</p>
</blockquote>
<p>这价格很可以了</p>
<p><a href="https://my.racknerd.com/aff.php?aff=3406">同款VPS购买</a></p>
]]></summary>
        <content type="html"><![CDATA[<p>人生第一个vps总结，感觉很新奇，原来节点是这么搭建出来的,想买vps的小伙伴，可以先大概看看我整个的购买和搭建的流程，哪里容易出问题什么的，再做决定<br>
我的这个vps是Racknerd的</p>
<p>年付10.88刀，折合支付宝69rmb，性价比极高，反代优选能上 70mb/s</p>
<blockquote>
<p>1T/月<br>
1Gbps宽带<br>
内存786m<br>
单核</p>
</blockquote>
<p>这价格很可以了</p>
<p><a href="https://my.racknerd.com/aff.php?aff=3406">同款VPS购买</a></p>
<!-- more -->
<h1 id="购买vps并搭建节点服务">购买VPS并搭建节点服务</h1>
<p>1.买个vps</p>
<p>2.看下面用一键安装脚本搭建个节点</p>
<h2 id="节点安装或卸载">节点安装或卸载</h2>
<blockquote>
<p>温馨提醒，此脚本默认屏蔽一些不友好的网站！(仅限轮子相关)</p>
</blockquote>
<p>要求：Ubuntu 16+ / Debian 8+ / CentOS 7+ 系统<br>
<strong>推荐使用 Debian 9 系统，脚本会自动启用 BBR 优化。</strong><br>
备注：不推荐使用 Debian 8 系统，因为 Caddy 申请证书可能会出现一些莫名其妙的问题<br>
使用 root 用户输入下面命令安装或卸载</p>
<pre><code>bash &lt;(curl -s -L https://git.io/v2ray.sh)
</code></pre>
<blockquote>
<p>如果提示 curl: command not found ，那是因为你的 VPS 没装 Curl<br>
ubuntu/debian 系统安装 Curl 方法: <code>apt-get update -y &amp;&amp; apt-get install curl -y</code><br>
centos 系统安装 Curl 方法: <code>yum update -y &amp;&amp; yum install curl -y</code><br>
安装好 curl 之后就能安装脚本了</p>
</blockquote>
<p>备注：安装完成后，输入 <code>v2ray</code> 即可管理 V2Ray<br>
如果提示你的系统不支持此脚本，那么请尝试更换系统</p>
<p>下面是此脚本的一些截图</p>
<p>安装选项</p>
<figure data-type="image" tabindex="1"><img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30312f30352f356333303532323463666530352e6a7067" alt="安装 V2Ray" loading="lazy"></figure>
<p>默认不配置配置 Shadowsocks，然后按提示操作就行了</p>
<h2 id="关于传输协议的选择">关于传输协议的选择</h2>
<p>你可以直接默认好像容易被墙，我没试过，现在比较流行的是3（ws）和4（ws+tls），选择这两个都得需要一个域名，看下面的白嫖域名，先去白嫖个域名，并且解析到你的vps的ip</p>
<h2 id="白嫖个域名freenom">白嫖个域名freenom</h2>
<p>去这里选个域名<a href="https://my.freenom.com/domains.php">https://my.freenom.com/domains.php</a></p>
<p><strong>需要注意：</strong></p>
<p>1.全程用v2rayN开全局，建议使用美国节点，香港的节点我老是失败，你要是到最后一步骤提示你错了，你就换个节点试试啥的</p>
<p>2.推荐用goole邮箱登入，并且登入之后，个人信息里面的地址手机号啥的，尽量和你用的节点地址一样，要不也可能导致失败</p>
<p>3.当你选好域名，进入购物车的时候，默认是三个月并且，等一会等页面加载完了加载完才能选（无语bug），把时间一定给成改成12个月，3个月很可能失败</p>
<p>4.要是你发现你筛选出的域名都不可用，那就换个节点试试</p>
<h2 id="解析域名">解析域名</h2>
<figure data-type="image" tabindex="2"><img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/image-20211123160255777.png" alt="image-20211123160255777" loading="lazy"></figure>
<p>进去之后点击<img src="C:%5CUsers%5CPC-Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211123160400725.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="3"><img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/image-20211123160600773.png" alt="image-20211123160600773" loading="lazy"></figure>
<p>添加两条解析记录，左边按我的填，右边填你的vps的ip</p>
<p>填写好保存，等待解析完成一般是十几分钟到两个小时就能解析生效</p>
<p>你可以去这里<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a>，或者其他的ping网站检测下，这个域名有没有解析到你的ip</p>
<h1 id="关于垃圾vps提速优化">关于垃圾vps提速优化</h1>
<p>cloudflare 一向以提供免费的优质服务为名，cf 的反代优选就是利用 workers 反代然后优选 IP 来达到一个节点提速的效果。</p>
<p>目测移动带宽反代优选效果最佳，电信联通效果也很好，但可能不是那么显著（仅目测，请以实际效果为准）</p>
<p>反代优选一般是给如 racknerd，heroku 等这类线路不佳的搭建节点提速用的。</p>
<p>其中 racknerd 最为明显，反代优选前一般是 3mb/s - 5mb/s 的速度，而反代优选后可以达到 70mb/s 的速度（毕竟 racknerd 机器是 G 口的，理论上限可达 128mb/s）</p>
<h2 id="准备工作">准备工作</h2>
<ul>
<li>cloudflare 账号，一个已经解析到 VPS 的域名</li>
<li>v2rayn（本地配置节点信息用的，使用别的类似软件也可）</li>
<li>一个已经搭建好的节点，要求必须是 <code>vmess+ws+tls</code> 等这类可以反代优选或使用 CDN 的协议</li>
<li>优选 IP 软件，项目地址:
<ol>
<li>我比较常用的： https://github.com/badafans/better-cloudflare-ip<br>
release 界面中下载 <code>windows.zip</code> 解压即可（目前也推出了 linux 和安卓端）</li>
<li>https://github.com/XIU2/CloudflareSpeedTest<br>
realease 界面中下载 <code>CloudflareST_windows_amd64.zip</code> 即可（其他版本自行看说明下载对应版本）</li>
</ol>
</li>
</ul>
<h2 id="cf-反代">CF 反代</h2>
<p>这个时候就需要我们的 Cloudflare 的 workers 来进行一个反代加速了。</p>
<p>在主页点击 Workers。可能会让你输入一个你的域名，有的话可以输入你 freenom 的域名或者你自己的域名，已经解析到你的vps了的域名</p>
<p>[<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/Snipaste_2021-01-04_10-54-15.webp" alt="img" loading="lazy">](https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New folder/Snipaste_2021-01-04_10-54-15.webp)</p>
<p>进入 workers 界面以后点击 Create a worker 创建一个 worker</p>
<p>[<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/Snipaste_2021-01-04_10-55-22.webp" alt="img" loading="lazy">](https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New folder/Snipaste_2021-01-04_10-55-22.webp)</p>
<p>把左边 Script 脚本的内容清空，然后复制下面的代码进去</p>
<pre><code>CODE
addEventListener(
	&quot;fetch&quot;,event =&gt; {
		let url=new URL(event.request.url);
		url.hostname=&quot;域名&quot;;
		let request=new Request(url,event.request);
		event. respondWith(
			fetch(request)
		)
	}
)
</code></pre>
<p>然后把<code>域名</code>改成你解析的域名，同样要去掉 https 等那些东西，如 <code>jiedian.ednovas.xyz</code></p>
<p>[<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/Snipaste_2021-01-04_10-58-36.webp" alt="img" loading="lazy">](https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New folder/Snipaste_2021-01-04_10-58-36.webp)</p>
<p>然后点击 Save and Deploy 保存和部署。等待几秒部署完成后点击 send 发送。如果右边出现 <em>400 Bad Request</em> 说明配置成功。如果出现如 502 等其他错误代码说明配置失败 (其实出现了也问题不大，直接略过这里即可)。</p>
<p>[<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/Snipaste_2021-01-04_11-00-55.webp" alt="img" loading="lazy">](https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New folder/Snipaste_2021-01-04_11-00-55.webp)</p>
<p>在这里把这个 HTTP 下面的这个地址复制到 V2ray 里刚刚配置的那个文件里的地址和伪装域名这里。（双击刚刚配置的节点可以再次打开这个配置界面）点击确定保存。</p>
<p>[<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/Snipaste_2021-01-04_11-02-58.webp" alt="img" loading="lazy">](https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New folder/Snipaste_2021-01-04_11-02-58.webp)</p>
<p>再来测速，好家伙，直接几百 kbps 的速度了，这速度还不如刚才呢。不要急，有速度说明刚刚的配置没有问题。下面还需要使用优选 IP 来实现完全的加速。</p>
<p>[<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/Snipaste_2021-01-04_11-04-25.webp" alt="img" loading="lazy">](https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New folder/Snipaste_2021-01-04_11-04-25.webp)</p>
<h2 id="优选-ip">优选 IP</h2>
<p>将下载好了的 CF 优选 IP 软件解压后，打开 CF 优选 <code>IP.bat</code>，在弹出的 cmd 窗口中输入你家的带宽大小。不建议直接输入你家实际带宽总大小，会导致程序没法正确找到合适的 IP。</p>
<p>如果不知道自己家的带宽是多少的，可以上 <a href="https://speedtest.net/">https://speedtest.net</a> 测速，看下载带宽速度是多少 Mbps。</p>
<p>这里是建议先选择你家 IP 一半的带宽大小。比如我家是 100 兆 的带宽，那么我这里就选择 50 兆。如果你对测出来的 IP 速度不满意，那么可以逐渐加大这个数字，下次测速 60、在下次 70，总之切勿超过自家最大带宽。</p>
<p>一般来说，100M 选择 70-80M，200M 选择 160-180M，300M 选择 260-280M，差不多个值就行，也不用非得填 100M 和 200M 这样填满，否则有可能会一直循环跑脚本。</p>
<p>[<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/Snipaste_2021-01-04_11-08-36.webp" alt="img" loading="lazy">](https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New folder/Snipaste_2021-01-04_11-08-36.webp)</p>
<p>我这里输入 50 以后直接按 Enter 回车，然后等待一段时间，不会超过 5 分钟，他会自动测速并且筛选优选 IP，耐心等待即可。</p>
<p>[<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/Snipaste_2021-01-04_11-12-03.webp" alt="img" loading="lazy">](https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New folder/Snipaste_2021-01-04_11-12-03.webp)</p>
<p>那么测试出来以后，把上方的优选 IP 复制下来，我这里也就是 104.19.71.197。注意不要复制到空格。</p>
<p>[<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/Snipaste_2021-01-04_11-13-00.webp" alt="img" loading="lazy">](https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New folder/Snipaste_2021-01-04_11-13-00.webp)</p>
<p>再次打开 V2ray 的节点配置界面，把刚刚的优选出来的 IP 复制黏贴到地址里，并点击确定保存。</p>
<p>[<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/Snipaste_2021-01-04_11-14-28.webp" alt="img" loading="lazy">](https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New folder/Snipaste_2021-01-04_11-14-28.webp)</p>
<p>现在再来看这个节点的速度，十分可观啊，直接上了 3w，甚至直逼 4w。看个 4k 视频没有什么压力的高速度了。</p>
<p>[<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/Snipaste_2021-01-04_11-15-38.webp" alt="img" loading="lazy">](https://cdn.jsdelivr.net/gh/wdm1732418365/CDN/New folder/Snipaste_2021-01-04_11-15-38.webp)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[青龙选择性通知暂行解决办法(修改sendnotify.js文件)]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/sendnotify_linshi/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/sendnotify_linshi/">
        </link>
        <updated>2021-11-07T10:11:21.000Z</updated>
        <summary type="html"><![CDATA[<p>大致原理：就是通过匹配关键字的方式来判断是否通知<br>
下面教程：教程代码很长，但几乎都没用，你只看我的文字描述，那里提到那一句代码了，你就去看看，绝对能看明白</p>
]]></summary>
        <content type="html"><![CDATA[<p>大致原理：就是通过匹配关键字的方式来判断是否通知<br>
下面教程：教程代码很长，但几乎都没用，你只看我的文字描述，那里提到那一句代码了，你就去看看，绝对能看明白</p>
<!-- more -->
<p>在这之前先看下某个通知对应的变量</p>
<pre><code>宠汪汪积分兑换有就换版         //这是标题，对应变量text

【京东账号5】 琪琪qiqw        //从这往下都是内容，对应变量desp
【20京豆】兑换成功🎉
【积分详情】消耗积分 350

【京东账号11】 捉住米米
【20京豆】兑换成功🎉
【积分详情】消耗积分 360
</code></pre>
<p>找到plusplus通知部分的代码，这里我拿过来了</p>
<pre><code class="language-js">function pushPlusNotify(text, desp) {
  return new Promise((resolve) =&gt; {
    if (PUSH_PLUS_TOKEN) {
      desp = desp.replace(/[\n\r]/g, '&lt;br&gt;'); // 默认为html, 不支持plaintext
      const body = {
        token: `${PUSH_PLUS_TOKEN}`,
        title: `${text}`,
        content: `${desp}`,
        topic: `${PUSH_PLUS_USER}`,
      };
      const options = {
        url: `https://www.pushplus.plus/send`,
        body: JSON.stringify(body),
        headers: {
          'Content-Type': ' application/json',
        },
        timeout,
      };
      $.post(options, (err, resp, data) =&gt; {
        try {
          if (err) {
            console.log(
              `push+发送${
                PUSH_PLUS_USER ? '一对多' : '一对一'
              }通知消息失败！！\n`,
            );
            console.log(err);
          } else {
            data = JSON.parse(data);
            if (data.code === 200) {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息完成。\n`,
              );
            } else {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息失败：${data.msg}\n`,
              );
            }
          }
        } catch (e) {
          $.logErr(e, resp);
        } finally {
          resolve(data);
        }
      });
    } else {
      resolve();
    }
  });
}
</code></pre>
<p>如果你想通知标题中包含资产的通知，那你就修改第三句if语句为</p>
<pre><code class="language-js">if (PUSH_PLUS_TOKEN &amp;&amp; text.indexOf(&quot;资产&quot;) != -1)
</code></pre>
<h3 id="重点">重点：</h3>
<p>如果关键字在标题就用<code>text.indexOf(&quot;关键字&quot;) != -1</code>，如果关键字在内容就用<code>desp.indexOf(&quot;关键字&quot;) != -1</code></p>
<p>如果你要通知多个通知，那么现在就得用else if语句匹配多个关键字了，多几个关键字，你就在if和else之间添加多少else if</p>
<pre><code class="language-js">   else if (PUSH_PLUS_TOKEN &amp;&amp; text.indexOf(&quot;关键字N&quot;) != -1) {
      desp = desp.replace(/[\n\r]/g, '&lt;br&gt;'); // 默认为html, 不支持plaintext
      const body = {
        token: `${PUSH_PLUS_TOKEN}`,
        title: `${text}`,
        content: `${desp}`,
        topic: `${PUSH_PLUS_USER}`,
      };
      const options = {
        url: `https://www.pushplus.plus/send`,
        body: JSON.stringify(body),
        headers: {
          'Content-Type': ' application/json',
        },
        timeout,
      };
      $.post(options, (err, resp, data) =&gt; {
        try {
          if (err) {
            console.log(
              `push+发送${
                PUSH_PLUS_USER ? '一对多' : '一对一'
              }通知消息失败！！\n`,
            );
            console.log(err);
          } else {
            data = JSON.parse(data);
            if (data.code === 200) {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息完成。\n`,
              );
            } else {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息失败：${data.msg}\n`,
              );
            }
          }
        } catch (e) {
          $.logErr(e, resp);
        } finally {
          resolve(data);
        }
      });
    }
</code></pre>
<h1 id="成品例子">成品例子</h1>
<pre><code class="language-js">function pushPlusNotify(text, desp) {
  return new Promise((resolve) =&gt; {
    if (PUSH_PLUS_TOKEN &amp;&amp; text.indexOf(&quot;资产&quot;) != -1) {  //通知 标题 中有资产的
      desp = desp.replace(/[\n\r]/g, '&lt;br&gt;'); // 默认为html, 不支持plaintext
      const body = {
        token: `${PUSH_PLUS_TOKEN}`,
        title: `${text}`,
        content: `${desp}`,
        topic: `${PUSH_PLUS_USER}`,
      };
      const options = {
        url: `https://www.pushplus.plus/send`,
        body: JSON.stringify(body),
        headers: {
          'Content-Type': ' application/json',
        },
        timeout,
      };
      $.post(options, (err, resp, data) =&gt; {
        try {
          if (err) {
            console.log(
              `push+发送${
                PUSH_PLUS_USER ? '一对多' : '一对一'
              }通知消息失败！！\n`,
            );
            console.log(err);
          } else {
            data = JSON.parse(data);
            if (data.code === 200) {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息完成。\n`,
              );
            } else {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息失败：${data.msg}\n`,
              );
            }
          }
        } catch (e) {
          $.logErr(e, resp);
        } finally {
          resolve(data);
        }
      });
    } 
      
    else if (PUSH_PLUS_TOKEN &amp;&amp; desp.indexOf(&quot;关键字N&quot;) != -1) { //通知 内容 中有关键字N的
      desp = desp.replace(/[\n\r]/g, '&lt;br&gt;'); // 默认为html, 不支持plaintext
      const body = {
        token: `${PUSH_PLUS_TOKEN}`,
        title: `${text}`,
        content: `${desp}`,
        topic: `${PUSH_PLUS_USER}`,
      };
      const options = {
        url: `https://www.pushplus.plus/send`,
        body: JSON.stringify(body),
        headers: {
          'Content-Type': ' application/json',
        },
        timeout,
      };
      $.post(options, (err, resp, data) =&gt; {
        try {
          if (err) {
            console.log(
              `push+发送${
                PUSH_PLUS_USER ? '一对多' : '一对一'
              }通知消息失败！！\n`,
            );
            console.log(err);
          } else {
            data = JSON.parse(data);
            if (data.code === 200) {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息完成。\n`,
              );
            } else {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息失败：${data.msg}\n`,
              );
            }
          }
        } catch (e) {
          $.logErr(e, resp);
        } finally {
          resolve(data);
        }
      });
    }
      
    else {
      resolve();
    }
  });
}
</code></pre>
<p>注意代码插入的位置,在下面这段else代码的上面插入else if</p>
<pre><code class="language-js">    else {
      resolve();
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[代挂须知]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/daigua_5701/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/daigua_5701/">
        </link>
        <updated>2021-11-07T06:01:14.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="特别注意">特别注意：</h1>
<p>本项目脚本收集于互联网。为了您的财产安全，请关闭京东免密支付。<br>
(关闭免密支付：进京东-我的-设置-支付设置-小额免密-关闭)</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="特别注意">特别注意：</h1>
<p>本项目脚本收集于互联网。为了您的财产安全，请关闭京东免密支付。<br>
(关闭免密支付：进京东-我的-设置-支付设置-小额免密-关闭)</p>
<!-- more -->
<h1 id="这是干嘛的">这是干嘛的？</h1>
<p>自动做京东任务 包括但限于以下任务<br>
宠汪汪 自动领金币换京豆<br>
东东萌宠 自动喂宠物，能换东西<br>
东东农场 自动浇水，换水果<br>
京喜农场 自动喂小鸡，领金蛋，金蛋可以换东西和现金<br>
京喜财富岛 自动做任务，转财富，财富可以换东西<br>
还有很多，我就不一一列举<br>
目前就开放了30个名额，用来测试服务器的性能，如果够用，后序可能还要开放名额，或者搭建第二台服务器</p>
<h1 id="关于我性格佛系青年">关于我（性格：佛系青年）</h1>
<p>本人大四学生党一枚，挂这个纯属就是为了玩，顺便做做测试，测试下这个容器最多能跑多少个账号，还有就是，我看到咸鱼上有收费代挂的，几块到十几块一个月的，这么算下来，挂30个账号，一个月最多就是300块钱，但是太麻烦了，还得维护，每个月30个账号的失效和更新，各种问题，太浪费时间，我就想着搭建一个平台让你们自己每个月更新自己的账号，从而实现相对的自动，相对我也轻松点</p>
<h1 id="怎么登入">怎么登入：</h1>
<p>进入代挂地址<a href="http://82.157.50.117:5701/">http://82.157.50.117:5701/</a>（哈哈，域名都懒得绑了，直接服务器＋端口，我太懒了）,输入手机号和验证码，选择第一个容器登入就行了</p>
<p>注意：如果想要查看每天的京豆和红包，请在登入后点击<code>复制CK</code>,备用，下面会用到，如果对每天获得京豆没兴趣，就是想着挂着就行，请忽略下面教程，但是要记得每个月来这里登入一下，因为每个账号时效大概在30天左右</p>
<h1 id="查看每天刷的京豆和红包目前仅支持安卓">查看每天刷的京豆和红包（目前仅支持安卓）</h1>
<p>1.下载 京豆app<br>
蓝奏云：<a href="https://sexyfox.lanzouw.com/iiY0Ow91lyh">https://sexyfox.lanzouw.com/iiY0Ow91lyh</a><br>
2.打开软件，点击<code>主账号</code>，把上面复制到的CK粘贴进去，点击更新账号1的CK<br>
3.回到桌面上添加一个这个app的桌面组件<br>
<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/20211107142413.png" alt="" loading="lazy"><br>
这是正常显示，点击右边的哪个豆豆会刷新豆豆数量</p>
<p>如果显示以下的样子，那就说明你的账号过期了，需要你重新登入下，然后再复制CK，粘贴到这个APP里面<br>
<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/20211107142749.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[青龙内部互助通用脚本]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/code_huzhu/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/code_huzhu/">
        </link>
        <updated>2021-11-06T13:29:44.000Z</updated>
        <summary type="html"><![CDATA[<p>脚本来自Q群：<a href="https://jq.qq.com/?_wv=1027&amp;k=lRRwo4UM">644288320</a></p>
<p>测试仓库：faker2（全称：shufflewzc_faker2）</p>
]]></summary>
        <content type="html"><![CDATA[<p>脚本来自Q群：<a href="https://jq.qq.com/?_wv=1027&amp;k=lRRwo4UM">644288320</a></p>
<p>测试仓库：faker2（全称：shufflewzc_faker2）</p>
<!-- more -->
<p>1.下载两个脚本</p>
<p>览奏云：<a href="https://sexyfox.lanzouw.com/i3GYIw8bthc">https://sexyfox.lanzouw.com/i3GYIw8bthc</a></p>
<p>2.去宿主机青龙的映射文件夹下</p>
<p><code>code.sh</code>直接丢scripts文件夹（如果你用的shufflewzc_faker2这个库，那就不用改，如果用的别的库，记得改下脚本前缀）</p>
<p>怎么改见<code>code.sh</code>脚本的9-19行,这里我拿过来给你们看看，如果预设的仓库没有，你就自己添加一条，<code>repo8='XXXXXXXX'</code>,顺便把<code>repo=$repo8</code></p>
<pre><code class="language-js">## 预设的仓库及默认调用仓库设置
## 将&quot;repo=$repo1&quot;改成repo=$repo2&quot;或其他，以默认调用其他仓库脚本日志
## 也可自行搜索本脚本内的&quot;name_js=(&quot;和&quot;name_js_only&quot;,将&quot;repo&quot;改成&quot;repo2&quot;或其他，用以自
由组合调用仓库的脚本日志
repo1='panghu999_jd_scripts'                       #预设的 panghu999 仓库
repo2='JDHelloWorld_jd_scripts'                    #预设的 JDHelloWorld 仓库
repo3='he1pu_JDHelp'                               #预设的 he1pu 仓库
repo4='yuannian1112_jd_scripts'                    #预设的 yuannian1112_jd_scripts 仓库
repo5='Wenmoux_scripts_wen_chinnkarahoi'           #预设的 Wenmoux 仓库，用于读取口袋书店互助码。需提前拉取温某人的仓库或口袋书店脚本并完整运行。
repo6='Aaron-lv_sync_jd_scripts'                   #预设的 Aaron-lv 仓库
repo7='shufflewzc_faker2'                          #预设的 shufflewzc_faker2 仓库
repo=$repo7                                        #默认调用 shufflewzc_faker2 仓库脚本日志
</code></pre>
<p><code>task_before.sh</code>这个脚本直接丢config文件夹覆盖同名脚本</p>
<p>3.去青龙面板添加一个定时任务<code>task code.sh</code>,就完了，运行频率看你自己，我设置的 <code>11 0,23 * * *</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[京东青龙脚本库]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/qinglong_getjs/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/qinglong_getjs/">
        </link>
        <updated>2021-10-29T01:36:15.000Z</updated>
        <summary type="html"><![CDATA[<p>记录常见的青龙脚本库</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录常见的青龙脚本库</p>
<!-- more -->
<ol>
<li>JB库<br>
ql repo https://ghproxy.com/github.com/KingRan/JDJB.git &quot;jd_|jx_|jdCookie&quot; &quot;activity|backUp&quot; &quot;<sup>jd[</sup>_]|USER|utils|function|sign|sendNotify|ql|JDJR&quot;</li>
<li>smiek2121开卡库：<br>
ql repo https://ghproxy.com/github.com/smiek2121/scripts.git &quot;jd_|gua_&quot; &quot;&quot; &quot;ZooFaker_Necklace.js|JDJRValidator_Pure.js|sign_graphics_validate.js&quot;</li>
<li>619库<br>
ql repo https://github.com/gys619/jdd.git &quot;jd_|jx_|jddj_|gua_|jddj_|getJDCookie|wskey&quot; &quot;activity|backUp&quot; &quot;<sup>jd[</sup>_]|USER|utils|ZooFaker_Necklace|JDJRValidator_Pure|sign_graphics_validate|jddj_cookie|function|ql&quot;</li>
<li>kingran库<br>
ql repo https://ghproxy.com/github.com/KingRan/JD-Scripts.git &quot;jd_|jx_|getJDCookie&quot; &quot;activity|backUp&quot; &quot;<sup>jd[</sup>_]|USER|utils|function&quot;</li>
<li>faker2库<br>
ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git &quot;jd_|jx_|gua_|jddj_|getJDCookie&quot; &quot;activity|backUp&quot; &quot;<sup>jd[</sup><em>]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator</em>|sign_graphics_validate|ql&quot;</li>
<li>faker3纯净库<br>
ql repo https://ghproxy.com/https://github.com/shufflewzc/faker3.git &quot;jd_|jx_|gua_|jddj_|getJDCookie&quot; &quot;activity|backUp&quot; &quot;<sup>jd[</sup><em>]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator</em>|sign_graphics_validate|ql&quot;</li>
<li>ccwav大佬的资产通知增强版和CK检测 不包含sendNotify:<br>
ql repo https://github.com/ccwav/QLScript2.git &quot;jd_&quot; &quot;sendNotify|NoUsed&quot; &quot;ql&quot; 包含sendNotify: ql repo https://github.com/ccwav/QLScript2.git &quot;jd_&quot; &quot;NoUsed&quot; &quot;ql|sendNotify&quot;</li>
</ol>
<p>欢迎补充更新……</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[String总结]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/string_zongjie/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/string_zongjie/">
        </link>
        <updated>2021-10-27T07:57:19.000Z</updated>
        <summary type="html"><![CDATA[<p>记录一些关于String的知识点</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录一些关于String的知识点</p>
<!-- more -->
<h1 id="总结">总结</h1>
<ol>
<li>字符串都是对象</li>
<li>字符串一旦初始化就无法修改，因为字符串时是常量</li>
<li>通过String类的构造函数传参，可以将字节数组或者字符数组转换成字符串<pre><code class="language-java">char [] arr = {'a','b','c','d'};
String str = new String(arr);
String str = new String(arr,0,2);
//0的位置是偏移量，也就是起始位置的角标
//2的位置从偏移量往后截取多少长度的字符串，这里起始位置也占一个长度
/*JKD文档的解释
String(char[] value, int offset, int count)
分配一个新的 String ，其中包含字符数组参数的子阵列中的字符。*/
</code></pre>
</li>
</ol>
<h1 id="面试题">面试题</h1>
<pre><code class="language-java">//-----------------------
		System.out.println(&quot;++++++++++++++++多个引用指向同一个字符串+++++++++++++++++++&quot;);
		String s1 = &quot;ldsoy&quot;;
		String s2 = &quot;ldsoy&quot;;
		
		System.out.println(s1 == s2);
		System.out.println(s1.equals(s2));
		
		System.out.println(&quot;++++++++++++++++两个内容相同创建方式不同对的字符串+++++++++++++++++++&quot;);
		String s3 = &quot;abc&quot;;
		char [] arrc= {'a','b','c','d','e','f'};
		String s4 = new String(arrc,0,3);
		
		
		System.out.println(s3);
		System.out.println(s4);
		System.out.println(s3 == s4);
		System.out.println(s3.equals(s4));

//结果
++++++++++++++++多个引用指向同一个字符串+++++++++++++++++++
true
true
++++++++++++++++两个内容相同创建方式不同对的字符串+++++++++++++++++++
abc
abc
false
true
</code></pre>
<p>面试题总结，s1 == s2这个是true是因为两个对象的引用都指向了同一个字符串，这个字符串在方法去的常量池中，s1.equals(s2)这个方法本是比较的两个对象地址，但是由于String类重写了这个方法写成了两个字符串的字面比较相同返回true</p>
<p>下面的s3 == s4是fales，是因为s3的字符串本身就存在与常量池中，s4是调用了String的构造方法又新生成的一个字符串对象，所以两个字符串对象是不一样的，s3.equals(s4)是true同上s1.equals(s2)的比较</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何备份青龙面板的环境变量]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/qinglong_env_backup/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/qinglong_env_backup/">
        </link>
        <updated>2021-10-26T19:37:36.000Z</updated>
        <summary type="html"><![CDATA[<p>每次重装完青龙面板，我们不得不面对的一个问题就是，环境变量还要重新配置，对于环境变量少的人来说，倒是简单，但是对于多的人来说，那就是头疼事儿了啊</p>
]]></summary>
        <content type="html"><![CDATA[<p>每次重装完青龙面板，我们不得不面对的一个问题就是，环境变量还要重新配置，对于环境变量少的人来说，倒是简单，但是对于多的人来说，那就是头疼事儿了啊</p>
<!-- more -->
<p><mark>声明</mark><br>
以下步骤皆以<a href="https://ldsoy.github.io/AnnanBlogs/post/install_qinglong/">https://ldsoy.github.io/AnnanBlogs/post/install_qinglong/</a>这个安装面板教程为前提</p>
<h1 id="备份db文件夹下的envdb文件">备份db文件夹下的env.db文件</h1>
<p>情况一：<br>
安装青龙的时候，这个db文件夹一般都映射到宿主机了，直接去宿主机找就行了，找到里面的env.db文件，备份下，装好新容器直接替换就行了</p>
<p>情况二：<br>
如果没有映射db文件夹，那就想办法通过命令行进入青龙面板，顺嘴提一下，进入青龙面板的docker命令<br>
<code>docker exec -it qinglong bash</code><br>
进去了之后就找到db文件夹，进去找到env.db,<code>cat env.db</code>打印一下变量内容，然后选中复制，等装好新容器，就把复制的内容粘贴进env.db文件就行了</p>
<p><mark>注意</mark><br>
上文说的环境变量是下图圈中的这个，别搞错了，替换完了env.db,记得重启面板才会生效<br>
<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/20211027040731.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[京东Cookie的获取（安卓＋PC）]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/get_jingdongcookie/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/get_jingdongcookie/">
        </link>
        <updated>2021-10-21T12:14:09.000Z</updated>
        <summary type="html"><![CDATA[<p>这里提供两种获取京东Cookie的方式</p>
]]></summary>
        <content type="html"><![CDATA[<p>这里提供两种获取京东Cookie的方式</p>
<!-- more -->
<h1 id="1安卓获取">1.安卓获取</h1>
<ul>
<li>下载 京豆app</li>
<li><a href="https://sexyfox.lanzouw.com/iiY0Ow91lyh">https://sexyfox.lanzouw.com/iiY0Ow91lyh</a></li>
<li>安装好</li>
<li><img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/1634819099908.jpg" alt="1634819107702" loading="lazy"></li>
<li>点击 <code>获取京东CK</code> 然后输入手机号验证码，就弹出来Cookie了</li>
</ul>
<p><mark>提示：</mark><br>
这个软件除了可以获取COOKIE外，还可以在桌面上添加京豆信息组件<br>
预览图：<a href="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/1634819099908.jpg">点击预览</a></p>
<p>感谢作者：<a href="https://github.com/wangjing71/JingBeanAppWidget">https://github.com/wangjing71/JingBeanAppWidget</a></p>
<h1 id="2pc获取">2.PC获取</h1>
<ul>
<li>下载 <code>Get_COOKIE.zip</code> 文件并解压</li>
<li>双击 <code>JDCookie获取工具-forWin.exe</code> 打开</li>
<li>如果有错，就命令行中的提示，去下载跟你谷歌版本差不多的驱动</li>
<li>查看谷歌版本<a href="chrome://settings/help">chrome://settings/help</a></li>
<li>装好驱动，就会弹出来京东手机网页的登入，输入手机号验证码，登入成功，COOKIE就会显示在命令行，同时程序目录下也会出现一个txt文档，里面就是获取到的COOKIE</li>
</ul>
]]></content>
    </entry>
</feed>