<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ldsoy.github.io/AnnanBlogs/</id>
    <title>Annan&apos;s Blogs</title>
    <updated>2021-11-07T10:54:06.994Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ldsoy.github.io/AnnanBlogs/"/>
    <link rel="self" href="https://ldsoy.github.io/AnnanBlogs/atom.xml"/>
    <subtitle>每天都要开心哦！</subtitle>
    <logo>https://ldsoy.github.io/AnnanBlogs/images/avatar.png</logo>
    <icon>https://ldsoy.github.io/AnnanBlogs/favicon.ico</icon>
    <rights>All rights reserved 2021, Annan&apos;s Blogs</rights>
    <entry>
        <title type="html"><![CDATA[青龙选择性通知暂行解决办法(修改sendnotify.js文件)]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/sendnotify_linshi/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/sendnotify_linshi/">
        </link>
        <updated>2021-11-07T10:11:21.000Z</updated>
        <summary type="html"><![CDATA[<p>大致原理：就是通过匹配关键字的方式来判断是否通知<br>
下面教程：看着代码很多，但是只用到几句，主要看我文字描述，我文字描述提到那几句代码了，你再看代码</p>
]]></summary>
        <content type="html"><![CDATA[<p>大致原理：就是通过匹配关键字的方式来判断是否通知<br>
下面教程：看着代码很多，但是只用到几句，主要看我文字描述，我文字描述提到那几句代码了，你再看代码</p>
<!-- more -->
<p>在这之前先看下某个通知对应的变量</p>
<pre><code>宠汪汪积分兑换有就换版         //这是标题，对应变量text

【京东账号5】 琪琪qiqw        //从这往下都是内容，对应变量desp
【20京豆】兑换成功🎉
【积分详情】消耗积分 350

【京东账号11】 捉住米米
【20京豆】兑换成功🎉
【积分详情】消耗积分 360
</code></pre>
<p>找到plusplus通知部分的代码，这里我拿过来了</p>
<pre><code class="language-js">function pushPlusNotify(text, desp) {
  return new Promise((resolve) =&gt; {
    if (PUSH_PLUS_TOKEN) {
      desp = desp.replace(/[\n\r]/g, '&lt;br&gt;'); // 默认为html, 不支持plaintext
      const body = {
        token: `${PUSH_PLUS_TOKEN}`,
        title: `${text}`,
        content: `${desp}`,
        topic: `${PUSH_PLUS_USER}`,
      };
      const options = {
        url: `https://www.pushplus.plus/send`,
        body: JSON.stringify(body),
        headers: {
          'Content-Type': ' application/json',
        },
        timeout,
      };
      $.post(options, (err, resp, data) =&gt; {
        try {
          if (err) {
            console.log(
              `push+发送${
                PUSH_PLUS_USER ? '一对多' : '一对一'
              }通知消息失败！！\n`,
            );
            console.log(err);
          } else {
            data = JSON.parse(data);
            if (data.code === 200) {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息完成。\n`,
              );
            } else {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息失败：${data.msg}\n`,
              );
            }
          }
        } catch (e) {
          $.logErr(e, resp);
        } finally {
          resolve(data);
        }
      });
    } else {
      resolve();
    }
  });
}
</code></pre>
<p>如果你想通知标题中包含资产的通知，那你就修改第三句if语句为</p>
<pre><code class="language-js">if (PUSH_PLUS_TOKEN &amp;&amp; text.indexOf(&quot;资产&quot;) != -1)
</code></pre>
<h3 id="重点">重点：</h3>
<p>如果关键字在标题就用<code>text.indexOf(&quot;关键字&quot;) != -1</code>，如果关键字在内容就用<code>desp.indexOf(&quot;关键字&quot;) != -1</code></p>
<p>如果你要通知多个通知，那么现在就得用else if语句匹配多个关键字了，多几个关键字，你就在if和else之间添加多少else if</p>
<pre><code class="language-js">   else if (PUSH_PLUS_TOKEN &amp;&amp; text.indexOf(&quot;关键字N&quot;) != -1) {
      desp = desp.replace(/[\n\r]/g, '&lt;br&gt;'); // 默认为html, 不支持plaintext
      const body = {
        token: `${PUSH_PLUS_TOKEN}`,
        title: `${text}`,
        content: `${desp}`,
        topic: `${PUSH_PLUS_USER}`,
      };
      const options = {
        url: `https://www.pushplus.plus/send`,
        body: JSON.stringify(body),
        headers: {
          'Content-Type': ' application/json',
        },
        timeout,
      };
      $.post(options, (err, resp, data) =&gt; {
        try {
          if (err) {
            console.log(
              `push+发送${
                PUSH_PLUS_USER ? '一对多' : '一对一'
              }通知消息失败！！\n`,
            );
            console.log(err);
          } else {
            data = JSON.parse(data);
            if (data.code === 200) {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息完成。\n`,
              );
            } else {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息失败：${data.msg}\n`,
              );
            }
          }
        } catch (e) {
          $.logErr(e, resp);
        } finally {
          resolve(data);
        }
      });
    }
</code></pre>
<h1 id="成品例子">成品例子</h1>
<pre><code class="language-js">function pushPlusNotify(text, desp) {
  return new Promise((resolve) =&gt; {
    if (PUSH_PLUS_TOKEN &amp;&amp; text.indexOf(&quot;资产&quot;) != -1) {  
      desp = desp.replace(/[\n\r]/g, '&lt;br&gt;'); // 默认为html, 不支持plaintext
      const body = {
        token: `${PUSH_PLUS_TOKEN}`,
        title: `${text}`,
        content: `${desp}`,
        topic: `${PUSH_PLUS_USER}`,
      };
      const options = {
        url: `https://www.pushplus.plus/send`,
        body: JSON.stringify(body),
        headers: {
          'Content-Type': ' application/json',
        },
        timeout,
      };
      $.post(options, (err, resp, data) =&gt; {
        try {
          if (err) {
            console.log(
              `push+发送${
                PUSH_PLUS_USER ? '一对多' : '一对一'
              }通知消息失败！！\n`,
            );
            console.log(err);
          } else {
            data = JSON.parse(data);
            if (data.code === 200) {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息完成。\n`,
              );
            } else {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息失败：${data.msg}\n`,
              );
            }
          }
        } catch (e) {
          $.logErr(e, resp);
        } finally {
          resolve(data);
        }
      });
    } 
      
    else if (PUSH_PLUS_TOKEN &amp;&amp; text.indexOf(&quot;关键字N&quot;) != -1) {
      desp = desp.replace(/[\n\r]/g, '&lt;br&gt;'); // 默认为html, 不支持plaintext
      const body = {
        token: `${PUSH_PLUS_TOKEN}`,
        title: `${text}`,
        content: `${desp}`,
        topic: `${PUSH_PLUS_USER}`,
      };
      const options = {
        url: `https://www.pushplus.plus/send`,
        body: JSON.stringify(body),
        headers: {
          'Content-Type': ' application/json',
        },
        timeout,
      };
      $.post(options, (err, resp, data) =&gt; {
        try {
          if (err) {
            console.log(
              `push+发送${
                PUSH_PLUS_USER ? '一对多' : '一对一'
              }通知消息失败！！\n`,
            );
            console.log(err);
          } else {
            data = JSON.parse(data);
            if (data.code === 200) {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息完成。\n`,
              );
            } else {
              console.log(
                `push+发送${
                  PUSH_PLUS_USER ? '一对多' : '一对一'
                }通知消息失败：${data.msg}\n`,
              );
            }
          }
        } catch (e) {
          $.logErr(e, resp);
        } finally {
          resolve(data);
        }
      });
    }
      
    else {
      resolve();
    }
  });
}
</code></pre>
<p>注意代码插入的位置,在下面这段else代码的上面插入else if</p>
<pre><code class="language-js">    else {
      resolve();
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[代挂须知]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/daigua_5701/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/daigua_5701/">
        </link>
        <updated>2021-11-07T06:01:14.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="特别注意">特别注意：</h1>
<p>本项目脚本收集于互联网。为了您的财产安全，请关闭京东免密支付。<br>
(关闭免密支付：进京东-我的-设置-支付设置-小额免密-关闭)</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="特别注意">特别注意：</h1>
<p>本项目脚本收集于互联网。为了您的财产安全，请关闭京东免密支付。<br>
(关闭免密支付：进京东-我的-设置-支付设置-小额免密-关闭)</p>
<!-- more -->
<h1 id="关于我性格佛系青年">关于我（性格：佛系青年）</h1>
<p>本人大四学生党一枚，挂这个纯属就是为了玩，顺便做做测试，测试下这个容器最多能跑多少个账号，还有就是，我看到咸鱼上有收费代挂的，几块到十几块一个月的，这么算下来，挂30个账号，一个月最多就是300块钱，但是太麻烦了，还得维护，每个月30个账号的失效和更新，各种问题，太浪费时间，我就想着搭建一个平台让你们自己每个月更新自己的账号，从而实现相对的自动，相对我也轻松点</p>
<h1 id="怎么登入">怎么登入：</h1>
<p>进入代挂地址<a href="http://82.157.50.117:5701/">http://82.157.50.117:5701/</a>（哈哈，域名都懒得绑了，直接服务器＋端口，我太懒了）,输入手机号和验证码，选择第一个容器登入就行了</p>
<p>注意：如果想要查看每天的京豆和红包，请在登入后点击<code>复制CK</code>,备用，下面会用到，如果对每天获得京豆没兴趣，就是想着挂着就行，请忽略下面教程，但是要记得每个月来这里登入一下，因为每个账号时效大概在30天左右</p>
<h1 id="查看每天刷的京豆和红包目前仅支持安卓">查看每天刷的京豆和红包（目前仅支持安卓）</h1>
<p>1.下载 京豆app<br>
蓝奏云：<a href="https://sexyfox.lanzouw.com/iiY0Ow91lyh">https://sexyfox.lanzouw.com/iiY0Ow91lyh</a><br>
2.打开软件，点击<code>主账号</code>，把上面复制到的CK粘贴进去，点击更新账号1的CK<br>
3.回到桌面上添加一个这个app的桌面组件<br>
<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/20211107142413.png" alt="" loading="lazy"><br>
这是正常显示，点击右边的哪个豆豆会刷新豆豆数量</p>
<p>如果显示以下的样子，那就说明你的账号过期了，需要你重新登入下，然后再复制CK，粘贴到这个APP里面<br>
<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/20211107142749.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[青龙内部互助通用脚本]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/code_huzhu/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/code_huzhu/">
        </link>
        <updated>2021-11-06T13:29:44.000Z</updated>
        <summary type="html"><![CDATA[<p>脚本来自Q群：<a href="https://jq.qq.com/?_wv=1027&amp;k=lRRwo4UM">644288320</a></p>
<p>测试仓库：faker2（全称：shufflewzc_faker2）</p>
]]></summary>
        <content type="html"><![CDATA[<p>脚本来自Q群：<a href="https://jq.qq.com/?_wv=1027&amp;k=lRRwo4UM">644288320</a></p>
<p>测试仓库：faker2（全称：shufflewzc_faker2）</p>
<!-- more -->
<p>1.下载两个脚本</p>
<p>览奏云：<a href="https://sexyfox.lanzouw.com/i3GYIw8bthc">https://sexyfox.lanzouw.com/i3GYIw8bthc</a></p>
<p>2.去宿主机青龙的映射文件夹下</p>
<p><code>code.sh</code>直接丢scripts文件夹（如果你用的shufflewzc_faker2这个库，那就不用改，如果用的别的库，记得改下脚本前缀）</p>
<p>怎么改见<code>code.sh</code>脚本的9-19行,这里我拿过来给你们看看，如果预设的仓库没有，你就自己添加一条，<code>repo8='XXXXXXXX'</code>,顺便把<code>repo=$repo8</code></p>
<pre><code class="language-js">## 预设的仓库及默认调用仓库设置
## 将&quot;repo=$repo1&quot;改成repo=$repo2&quot;或其他，以默认调用其他仓库脚本日志
## 也可自行搜索本脚本内的&quot;name_js=(&quot;和&quot;name_js_only&quot;,将&quot;repo&quot;改成&quot;repo2&quot;或其他，用以自
由组合调用仓库的脚本日志
repo1='panghu999_jd_scripts'                       #预设的 panghu999 仓库
repo2='JDHelloWorld_jd_scripts'                    #预设的 JDHelloWorld 仓库
repo3='he1pu_JDHelp'                               #预设的 he1pu 仓库
repo4='yuannian1112_jd_scripts'                    #预设的 yuannian1112_jd_scripts 仓库
repo5='Wenmoux_scripts_wen_chinnkarahoi'           #预设的 Wenmoux 仓库，用于读取口袋书店互助码。需提前拉取温某人的仓库或口袋书店脚本并完整运行。
repo6='Aaron-lv_sync_jd_scripts'                   #预设的 Aaron-lv 仓库
repo7='shufflewzc_faker2'                          #预设的 shufflewzc_faker2 仓库
repo=$repo7                                        #默认调用 shufflewzc_faker2 仓库脚本日志
</code></pre>
<p><code>task_before.sh</code>这个脚本直接丢config文件夹覆盖同名脚本</p>
<p>3.去青龙面板添加一个定时任务<code>task code.sh</code>,就完了，运行频率看你自己，我设置的 <code>11 0,23 * * *</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[云服务器安装nvjdc面板（配合青龙使用）]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/nvjdc_install_qinglong/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/nvjdc_install_qinglong/">
        </link>
        <updated>2021-11-06T10:38:16.000Z</updated>
        <summary type="html"><![CDATA[<p>感谢作者：<a href="https://github.com/NolanHzy/nvjdc">https://github.com/NolanHzy/nvjdc</a><br>
安装环境：centos 7.6<br>
配置：2h4g<br>
面板功能：手机号登入自动获取京东ck，并自动更新到青龙面板</p>
]]></summary>
        <content type="html"><![CDATA[<p>感谢作者：<a href="https://github.com/NolanHzy/nvjdc">https://github.com/NolanHzy/nvjdc</a><br>
安装环境：centos 7.6<br>
配置：2h4g<br>
面板功能：手机号登入自动获取京东ck，并自动更新到青龙面板</p>
<!-- more -->
<h2 id="安装">安装</h2>
<p>1.首先进入你的宿主机，不是青龙容器<br>
2.创建一个目录放配置以及chromium（建议直接在 / 目录下创建，不能在青龙映射到宿主机的文件夹创建）</p>
<pre><code>cd /
</code></pre>
<pre><code>mkdir nolanjdc &amp;&amp; cd nolanjdc
</code></pre>
<p>3.下载config.json 配置文件(先下载好，一会再说怎么修改)</p>
<pre><code>wget -O Config.json  https://raw.githubusercontent.com/NolanHzy/nvjdc/main/Config.json
</code></pre>
<p>国内请使用</p>
<pre><code>wget -O Config.json   https://ghproxy.com/https://raw.githubusercontent.com/NolanHzy/nvjdc/main/Config.json
</code></pre>
<p>4 .创建chromium文件夹并进入</p>
<pre><code>mkdir -p  .local-chromium/Linux-884014 &amp;&amp; cd .local-chromium/Linux-884014
</code></pre>
<p>5.下载 chromium</p>
<pre><code>wget https://mirrors.huaweicloud.com/chromium-browser-snapshots/Linux_x64/884014/chrome-linux.zip &amp;&amp; unzip chrome-linux.zip
</code></pre>
<p>6.删除刚刚下载的压缩包,并回到上级目录</p>
<pre><code>rm  -f chrome-linux.zip
</code></pre>
<pre><code>cd  /nolanjdc
</code></pre>
<p>7.拉镜像(拉镜像的时候，如果拉不动，就检查一下你有没有装shellclash类似的代理软件，先把代理软件关了，再拉，因为一般国内的云服务器的docker的镜像都是用的国内163的镜像，如果开代理软件就会导致镜像从国外拉去，可能会是失败)</p>
<pre><code>sudo docker pull nolanhzy/nvjdc:0.5
</code></pre>
<p>8.启动镜像（这里是把80端口映射到了宿主机的5701端口，你们根据自己的情况改）</p>
<pre><code>sudo docker run   --name nolanjdc -p 5701:80 -d  -v  &quot;$(pwd)&quot;/Config.json:/app/Config/Config.json:ro \
-v &quot;$(pwd)&quot;/.local-chromium:/app/.local-chromium  \
-it --privileged=true  nolanhzy/nvjdc:0.5 
</code></pre>
<p>9.配置第三步下好的Config.json文件</p>
<pre><code class="language-java">&quot;Config&quot;: [
    {
      //序号必填从1 开始
      &quot;QLkey&quot;: 1,                                            //如果就一个容器，就不用改
      //服务器名称
      &quot;QLName&quot;: &quot;容器一（腾讯轻量云）&quot;,    //随便起个名字
      //青龙地址
      &quot;QLurl&quot;: &quot;http://xx.xx.xx.xx:5700&quot;,    //这是你的青龙地址
      //青龙2,9 OpenApi Client ID
      &quot;QL_CLIENTID&quot;: &quot;xxxxx&quot;,             //去青龙面板系统设置-应用设置里面添加一个应用，名称随便填，权限给个环境变量，如果不行就都给，弄好应用把Client ID弄这里
      //青龙2,9 OpenApi Client Secret
      &quot;QL_SECRET&quot;: &quot;xxxxxxxx&quot;,          //Client Secret弄这里
      //CK最大数量
      &quot;QL_CAPACITY&quot;: 30,                  //你想让你这个容器跑多少账号
      &quot;QRurl&quot;: &quot;&quot;                          
    }
</code></pre>
<p>10.配置好，重启容器,检查日志输出</p>
<pre><code>docker restart nolanjdc
</code></pre>
<pre><code>docker logs -f nolanjdc 
</code></pre>
<p>如果出现下面这样就好了</p>
<pre><code>True
检查成功
NETJDC started
</code></pre>
<p>11.弄好了直接访问你的ip:5701就好了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[京东青龙脚本库]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/qinglong_getjs/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/qinglong_getjs/">
        </link>
        <updated>2021-10-29T01:36:15.000Z</updated>
        <summary type="html"><![CDATA[<p>记录常见的青龙脚本库</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录常见的青龙脚本库</p>
<!-- more -->
<p>Faker</p>
<pre><code class="language-java">ql repo https://ghproxy.com/https://github.com/shufflewzc/faker2.git &quot;jd_|jx_|gua_|jddj_|getJDCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|ZooFaker_Necklace.js|JDJRValidator_Pure|sign_graphics_validate&quot;
</code></pre>
<p>Zero_205</p>
<pre><code class="language-java">ql repo https://github.com/zero205/JD_tencent_scf.git &quot;jd_|jx_|getJDCookie&quot; &quot;backUp|icon&quot; &quot;^jd[^_]|USER|sendNotify|sign_graphics_validate|JDJR|JDSign&quot; &quot;main&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[String总结]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/string_zongjie/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/string_zongjie/">
        </link>
        <updated>2021-10-27T07:57:19.000Z</updated>
        <summary type="html"><![CDATA[<p>记录一些关于String的知识点</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录一些关于String的知识点</p>
<!-- more -->
<h1 id="总结">总结</h1>
<ol>
<li>字符串都是对象</li>
<li>字符串一旦初始化就无法修改，因为字符串时是常量</li>
<li>通过String类的构造函数传参，可以将字节数组或者字符数组转换成字符串<pre><code class="language-java">char [] arr = {'a','b','c','d'};
String str = new String(arr);
String str = new String(arr,0,2);
//0的位置是偏移量，也就是起始位置的角标
//2的位置从偏移量往后截取多少长度的字符串，这里起始位置也占一个长度
/*JKD文档的解释
String(char[] value, int offset, int count)
分配一个新的 String ，其中包含字符数组参数的子阵列中的字符。*/
</code></pre>
</li>
</ol>
<h1 id="面试题">面试题</h1>
<pre><code class="language-java">//-----------------------
		System.out.println(&quot;++++++++++++++++多个引用指向同一个字符串+++++++++++++++++++&quot;);
		String s1 = &quot;ldsoy&quot;;
		String s2 = &quot;ldsoy&quot;;
		
		System.out.println(s1 == s2);
		System.out.println(s1.equals(s2));
		
		System.out.println(&quot;++++++++++++++++两个内容相同创建方式不同对的字符串+++++++++++++++++++&quot;);
		String s3 = &quot;abc&quot;;
		char [] arrc= {'a','b','c','d','e','f'};
		String s4 = new String(arrc,0,3);
		
		
		System.out.println(s3);
		System.out.println(s4);
		System.out.println(s3 == s4);
		System.out.println(s3.equals(s4));

//结果
++++++++++++++++多个引用指向同一个字符串+++++++++++++++++++
true
true
++++++++++++++++两个内容相同创建方式不同对的字符串+++++++++++++++++++
abc
abc
false
true
</code></pre>
<p>面试题总结，s1 == s2这个是true是因为两个对象的引用都指向了同一个字符串，这个字符串在方法去的常量池中，s1.equals(s2)这个方法本是比较的两个对象地址，但是由于String类重写了这个方法写成了两个字符串的字面比较相同返回true</p>
<p>下面的s3 == s4是fales，是因为s3的字符串本身就存在与常量池中，s4是调用了String的构造方法又新生成的一个字符串对象，所以两个字符串对象是不一样的，s3.equals(s4)是true同上s1.equals(s2)的比较</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何备份青龙面板的环境变量]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/qinglong_env_backup/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/qinglong_env_backup/">
        </link>
        <updated>2021-10-26T19:37:36.000Z</updated>
        <summary type="html"><![CDATA[<p>每次重装完青龙面板，我们不得不面对的一个问题就是，环境变量还要重新配置，对于环境变量少的人来说，倒是简单，但是对于多的人来说，那就是头疼事儿了啊</p>
]]></summary>
        <content type="html"><![CDATA[<p>每次重装完青龙面板，我们不得不面对的一个问题就是，环境变量还要重新配置，对于环境变量少的人来说，倒是简单，但是对于多的人来说，那就是头疼事儿了啊</p>
<!-- more -->
<p><mark>声明</mark><br>
以下步骤皆以<a href="https://ldsoy.github.io/AnnanBlogs/post/install_qinglong/">https://ldsoy.github.io/AnnanBlogs/post/install_qinglong/</a>这个安装面板教程为前提</p>
<h1 id="备份db文件夹下的envdb文件">备份db文件夹下的env.db文件</h1>
<p>情况一：<br>
安装青龙的时候，这个db文件夹一般都映射到宿主机了，直接去宿主机找就行了，找到里面的env.db文件，备份下，装好新容器直接替换就行了</p>
<p>情况二：<br>
如果没有映射db文件夹，那就想办法通过命令行进入青龙面板，顺嘴提一下，进入青龙面板的docker命令<br>
<code>docker exec -it qinglong bash</code><br>
进去了之后就找到db文件夹，进去找到env.db,<code>cat env.db</code>打印一下变量内容，然后选中复制，等装好新容器，就把复制的内容粘贴进env.db文件就行了</p>
<p><mark>注意</mark><br>
上文说的环境变量是下图圈中的这个，别搞错了，替换完了env.db,记得重启面板才会生效<br>
<img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/20211027040731.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[京东Cookie的获取（安卓＋PC）]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/get_jingdongcookie/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/get_jingdongcookie/">
        </link>
        <updated>2021-10-21T12:14:09.000Z</updated>
        <summary type="html"><![CDATA[<p>这里提供两种获取京东Cookie的方式</p>
]]></summary>
        <content type="html"><![CDATA[<p>这里提供两种获取京东Cookie的方式</p>
<!-- more -->
<h1 id="1安卓获取">1.安卓获取</h1>
<ul>
<li>下载 京豆app</li>
<li><a href="https://sexyfox.lanzouw.com/iiY0Ow91lyh">https://sexyfox.lanzouw.com/iiY0Ow91lyh</a></li>
<li>安装好</li>
<li><img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/1634819099908.jpg" alt="1634819107702" loading="lazy"></li>
<li>点击 <code>获取京东CK</code> 然后输入手机号验证码，就弹出来Cookie了</li>
</ul>
<p><mark>提示：</mark><br>
这个软件除了可以获取COOKIE外，还可以在桌面上添加京豆信息组件<br>
预览图：<a href="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/1634819099908.jpg">点击预览</a></p>
<p>感谢作者：<a href="https://github.com/wangjing71/JingBeanAppWidget">https://github.com/wangjing71/JingBeanAppWidget</a></p>
<h1 id="2pc获取">2.PC获取</h1>
<ul>
<li>下载 <code>Get_COOKIE.zip</code> 文件并解压</li>
<li>双击 <code>JDCookie获取工具-forWin.exe</code> 打开</li>
<li>如果有错，就命令行中的提示，去下载跟你谷歌版本差不多的驱动</li>
<li>查看谷歌版本<a href="chrome://settings/help">chrome://settings/help</a></li>
<li>装好驱动，就会弹出来京东手机网页的登入，输入手机号验证码，登入成功，COOKIE就会显示在命令行，同时程序目录下也会出现一个txt文档，里面就是获取到的COOKIE</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[薅京东羊毛+青龙面板的安装]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/install_qinglong/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/install_qinglong/">
        </link>
        <updated>2021-10-17T11:21:01.000Z</updated>
        <summary type="html"><![CDATA[<p>东东农场自动签到，自动签到领豆，自动给水果浇水·········</p>
]]></summary>
        <content type="html"><![CDATA[<p>东东农场自动签到，自动签到领豆，自动给水果浇水·········</p>
<!-- more -->
<h1 id="1首先自备docker">1.首先自备Docker</h1>
<h1 id="2安装青龙面板">2.安装青龙面板</h1>
<h2 id="1拉取青龙镜像">1.拉取青龙镜像</h2>
<p><code>docker pull whyour/qinglong:latest</code></p>
<h2 id="2安装青龙面板-2">2.安装青龙面板</h2>
<ul>
<li>服务器安装</li>
</ul>
<pre><code>docker run -dit \
   -v $PWD/ql/config:/ql/config \
   -v $PWD/ql/log:/ql/log \
   -v $PWD/ql/db:/ql/db \
   -v $PWD/ql/scripts:/ql/scripts \
   -p 5700:5700 \
   --name qinglong \
   --hostname qinglong \
   --restart always \
   whyour/qinglong:latest
</code></pre>
<ul>
<li>N1盒子安装（旁路由设备）</li>
</ul>
<pre><code>docker run -dit \
   -v /mnt/mmcblk2p4/qinglong/config:/ql/config \
   -v /mnt/mmcblk2p4/qinglong/log:/ql/log \
   -v /mnt/mmcblk2p4/qinglong/db:/ql/db \
   -v /mnt/mmcblk2p4/qinglong/scripts:/ql/scripts \
   --net host \
   --name qinglong \
   --hostname qinglong \
   --restart always \
   whyour/qinglong:latest
</code></pre>
<p>安装完成后开启5700的端口访问，即可用IP:5700访问青龙面板了</p>
<h1 id="3安装必要依赖">3.安装必要依赖</h1>
<p><code>docker exec -it qinglong bash -c &quot;pip3 install requests&quot;</code><br>
<code>docker exec -it qinglong bash -c &quot;apk add python3 zlib-dev gcc jpeg-dev python3-dev musl-dev freetype-dev&quot;</code><br>
下边这个宠汪汪是必装的<br>
<code>docker exec -it qinglong bash -c &quot;pnpm i png-js&quot;</code><br>
这个是宠汪汪活动的必要依赖，其他的依赖缺就装不缺就没啥。</p>
<h1 id="4拉库">4.拉库</h1>
<p>库的解释：就是一个脚本的集合，一个库里面有很多脚本，脚本对应的京东的活动<br>
这里推荐一个我目前用的库<br>
这是项目地址，里面有拉库的方法<br>
<a href="https://github.com/zero205/JD_tencent_scf/tree/main">https://github.com/zero205/JD_tencent_scf/tree/main</a></p>
<p>这是这个库的电报交流群<br>
<a href="https://t.me/jd_zero_205">https://t.me/jd_zero_205</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于CFW无法代理uwp应用]]></title>
        <id>https://ldsoy.github.io/AnnanBlogs/post/cfw_uwp/</id>
        <link href="https://ldsoy.github.io/AnnanBlogs/post/cfw_uwp/">
        </link>
        <updated>2021-10-05T03:55:30.000Z</updated>
        <summary type="html"><![CDATA[<p>正常情况下，clash for wondows 是无法代理到windows系统的UWP的应用的，UWP应用包括但不限于Microsoft Store，还有啥你可以自己搜下</p>
<p>这种模式好像叫UWP应用回环</p>
]]></summary>
        <content type="html"><![CDATA[<p>正常情况下，clash for wondows 是无法代理到windows系统的UWP的应用的，UWP应用包括但不限于Microsoft Store，还有啥你可以自己搜下</p>
<p>这种模式好像叫UWP应用回环</p>
<!-- more -->
<ol>
<li>
<p>打开clash，点击</p>
<figure data-type="image" tabindex="1"><img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/20211005115842.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>进去后选择你需要代理的UWP应用，Save changes就行了</p>
<figure data-type="image" tabindex="2"><img src="https://ldsoy.coding.net/p/PC/d/Img/git/raw/master/MDimg/20211005120254.png" alt="" loading="lazy"></figure>
</li>
</ol>
]]></content>
    </entry>
</feed>